#!/usr/bin/env node
/* eslint-disable */

const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

const config = {
  configPath: path.join(__dirname, '../src-tauri/typeshare.toml'),
  rustSrcPath: path.join(__dirname, '../src-tauri/src'),
  outputDir: path.join(__dirname, '../src/generated'),
  outputFilename: 'typeshare-types.ts',
  runPrettier: true,
}
function ensureOutputDirExists() {
  if (!fs.existsSync(config.outputDir)) {
    console.log(`Creating output directory: ${config.outputDir}`)
    fs.mkdirSync(config.outputDir, { recursive: true })
  }
}

function checkTypeshareInstalled() {
  try {
    execSync('typeshare --version', {
      stdio: config.debug ? 'inherit' : 'pipe',
    })
    return true
  } catch (error) {
    console.error('‚ùå typeshare CLI is not installed. Please install it first:')
    console.error('cargo install typeshare-cli')
    return false
  }
}

function runTypeshare() {
  const outputPath = path.join(config.outputDir, config.outputFilename)
  console.log(`üîÑ Generating TypeScript types from Rust code...`)

  try {
    const command = `typeshare -c "${config.configPath}" --lang typescript --output-file "${outputPath}" "${config.rustSrcPath}"`
    if (config.debug) {
      console.log(`Executing: ${command}`)
    }

    execSync(command, {
      stdio: config.debug ? 'inherit' : 'pipe',
    })
    console.log(`‚úÖ Successfully generated types at: ${outputPath}`)
    return outputPath
  } catch (error) {
    console.error('‚ùå Failed to generate types:', error.message)
    process.exit(1)
  }
}
function formatGeneratedCode(filePath) {
  if (!config.runPrettier) return

  try {
    const prettierPath = path.join(__dirname, '../node_modules/.bin/prettier')
    const prettierAvailable = fs.existsSync(prettierPath)

    if (prettierAvailable) {
      console.log('üíÖ Formatting generated code...')
      execSync(`npx prettier --write "${filePath}"`, {
        stdio: config.debug ? 'inherit' : 'pipe',
      })
    } else {
      console.log('‚ö†Ô∏è Prettier not found. Skipping code formatting.')
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Failed to format code:', error.message)
  }
}

function addWarningHeader(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8')
    const warning =
      `// This file is auto-generated by typeshare. DO NOT MODIFY BY HAND.\n` +
      `// Generated at: ${new Date().toISOString()}\n\n`

    fs.writeFileSync(filePath, warning + content)
    console.log('üìù Added warning header to generated file.')
  } catch (error) {
    console.error('‚ùå Failed to add warning header:', error.message)
  }
}
function main() {
  console.log('üöÄ Starting TypeScript type generation from Rust...')

  if (!checkTypeshareInstalled()) {
    return
  }

  ensureOutputDirExists()
  const outputPath = runTypeshare()
  addWarningHeader(outputPath)

  if (config.runPrettier) {
    formatGeneratedCode(outputPath)
  }
  console.log('‚ú® Type generation completed successfully!')
}
main()
