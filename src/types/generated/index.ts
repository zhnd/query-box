// This file is auto-generated by typeshare. DO NOT MODIFY BY HAND.
// Generated at: 2025-03-16T12:02:45.901Z

/*
 Generated by typeshare 1.13.2
*/

export interface NewSetting {
  key: string
  value: string
  value_type: string
  category: string
  description?: string
}

/**
 * Represents a single application setting in the key-value store pattern.
 *
 * This entity maps directly to the `app_settings` table in the database,
 * where each row represents a single configuration item. The key-value pattern
 * allows for flexible storage of various configuration types without requiring
 * schema changes when new settings are added.
 *
 * All fields are defined as `Option<String>` to accommodate SQLx's behavior
 * with SQLite, which treats columns as potentially nullable during compile-time
 * checking regardless of NOT NULL constraints in the schema.
 *
 */
export interface Setting {
  /**
   * Unique identifier for the setting, serving as the primary key.
   * Examples: "ui.theme.mode", "network.timeout", "editor.font_size"
   */
  key?: string
  /**
   * The actual configuration value stored as a string.
   * Type-specific parsing is required based on the value_type.
   */
  value?: string
  /**
   * Indicates the data type of the value: "string", "boolean", "number", "json", etc.
   * Used for proper type conversion when retrieving settings.
   */
  value_type?: string
  /**
   * Logical grouping of settings for organizational purposes.
   * Examples: "ui_theme", "network", "editor", "security"
   */
  category?: string
  /**
   * Optional human-readable description of the setting's purpose.
   * Useful for self-documentation and UI display.
   */
  description?: string
  created_at?: string
  updated_at?: string
}

export interface UpdateSetting {
  value: string
}
